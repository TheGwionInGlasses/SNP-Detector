from snpdetector.models import Sequence
import pytest

@pytest.fixture
def sequence():
    return Sequence("gene_reference_13", "ACATTTGCTTCTGACATTTGCTTCTGACACAACTGTGTTCACTAGCAACCTCAAACAGACACCATGGTGCATCTGACTCCTGAGGAGAAGTCTGCCGTTACTGCCCTGTGGGGCAAGGTGAACGTGGATGAAGTTGGTGGTGAGGCCCTGGGCAGGCTGCTGGTGGTCTACCCTTGGACCCAGAGGTTCTTTGAGTCCTTTGGGGATCTGTCCACTCCTGATGCTGTTATGGGCAACCCTAAGGTGAAGGCTCATGGCAAGAAAGTGCTCGGTGCCTTTAGTGATGGCCTGGCTCACCTGGACAACCTCAAGGGCACCTTTGCCACACTGAGTGAGCTGCACTGTGACAAGCTGCACGTGGATCCTGAGAACTTCAGGCTCCTGGGCAACGTGCTGGTCTGTGTGCTGGCCCATCACTTTGGCAAAGAATTCACCCCACCAGTGCAGGCTGCCTATCAGAAAGTGGTGGCTGGTGTGGCTAATGCCCTGGCCCACAAGTATCACTAAGCTCGCTTTCTTGCTGTCCAATTTCTATTAAAGGTTCCTTTGTTCCCTAAGTCCAACTACTAAACTGGGGGATATTATGAAGGGCCTTGAGCATCTGGATTCTGCCTAATAAAAAACATTTATTTTCATTGCAACACAACTGTGTTCACTAGCAACCTCAAACAGACACCATGGTAATTAGTTAGTCGAAGGAGTTCTTCGCCGAAAGCGTAATTTGCGGCTCCCGGATGAGGGATGCAGCTCGTTGTGATGCAACGGGGACCCTGCGCGTGGTTGTTCATAGAACCCTGCGTTGCACTGACTACGCCGGGCCATCGTTCTGTCTTGTATCTCTTAGGATTAAGACTAAACTGAAAGGGCTAGCCAATAATGCGCCCAGGGCCTTCAGAGACCGCTTACGTAGCCTGGTCAACCTCAATGGGACCTCTGCGACATTGAGTGAACTGCGATTCCAGCATCTACACACGGGCTTTTAAAATCTGAGGCTGCTGGCCCATTCTCTTACGAGAGTGCTGGCCGCCTAGTTCGGCAAAATCGTGGTGCCATTGCCGCAAAAGCCTGAGCAGAAATACGTGGCTGCGCTTGCTCATGTCAGTACCCATTCACACCCTCAAGCTCGCTTTCTTGCTGTCCAATTTCTATTAAAGGTTCCTTTGTTCCCTAAGTCCAACTACTAAACTGGGGGATATTATGAAGGGCCTTGAGCATCTGGATTCTGCCTAATAAAAAACATTTATTTTCATTGCA")

def test_sequence_length(sequence):
    assert sequence.get_sequence_length() == 1254
    
def test_sequence_longestORF(sequence):
    assert sequence.get_longest_orf().sequence == "ATGGTGCATCTGACTCCTGAGGAGAAGTCTGCCGTTACTGCCCTGTGGGGCAAGGTGAACGTGGATGAAGTTGGTGGTGAGGCCCTGGGCAGGCTGCTGGTGGTCTACCCTTGGACCCAGAGGTTCTTTGAGTCCTTTGGGGATCTGTCCACTCCTGATGCTGTTATGGGCAACCCTAAGGTGAAGGCTCATGGCAAGAAAGTGCTCGGTGCCTTTAGTGATGGCCTGGCTCACCTGGACAACCTCAAGGGCACCTTTGCCACACTGAGTGAGCTGCACTGTGACAAGCTGCACGTGGATCCTGAGAACTTCAGGCTCCTGGGCAACGTGCTGGTCTGTGTGCTGGCCCATCACTTTGGCAAAGAATTCACCCCACCAGTGCAGGCTGCCTATCAGAAAGTGGTGGCTGGTGTGGCTAATGCCCTGGCCCACAAGTATCACTAA"
    
def test_sequence_getSubsequence(sequence):
    assert sequence.get_subsequence_as_ORF(0, 6, 0).sequence == "ACATTT"
    
def test_sequence_getSubsequenceAntiSense(sequence):
    assert sequence.get_subsequence_as_ORF(0, 6, 3).sequence == "TGCAAT"