from snpdetector.models import Sequence, ORF
import pytest

@pytest.fixture
def sequence():
    header = "gene_reference_13"
    sequence = "ACATTTGCTTCTGACATTTGCTTCTGACACAACTGTGTTCACTAGCAACCTCAAACAGACACCATGGTGCATCTGACTCCTGAGGAGAAGTCTGCCGTTACTGCCCTGTGGGGCAAGGTGAACGTGGATGAAGTTGGTGGTGAGGCCCTGGGCAGGCTGCTGGTGGTCTACCCTTGGACCCAGAGGTTCTTTGAGTCCTTTGGGGATCTGTCCACTCCTGATGCTGTTATGGGCAACCCTAAGGTGAAGGCTCATGGCAAGAAAGTGCTCGGTGCCTTTAGTGATGGCCTGGCTCACCTGGACAACCTCAAGGGCACCTTTGCCACACTGAGTGAGCTGCACTGTGACAAGCTGCACGTGGATCCTGAGAACTTCAGGCTCCTGGGCAACGTGCTGGTCTGTGTGCTGGCCCATCACTTTGGCAAAGAATTCACCCCACCAGTGCAGGCTGCCTATCAGAAAGTGGTGGCTGGTGTGGCTAATGCCCTGGCCCACAAGTATCACTAAGCTCGCTTTCTTGCTGTCCAATTTCTATTAAAGGTTCCTTTGTTCCCTAAGTCCAACTACTAAACTGGGGGATATTATGAAGGGCCTTGAGCATCTGGATTCTGCCTAATAAAAAACATTTATTTTCATTGCAACACAACTGTGTTCACTAGCAACCTCAAACAGACACCATGGTAATTAGTTAGTCGAAGGAGTTCTTCGCCGAAAGCGTAATTTGCGGCTCCCGGATGAGGGATGCAGCTCGTTGTGATGCAACGGGGACCCTGCGCGTGGTTGTTCATAGAACCCTGCGTTGCACTGACTACGCCGGGCCATCGTTCTGTCTTGTATCTCTTAGGATTAAGACTAAACTGAAAGGGCTAGCCAATAATGCGCCCAGGGCCTTCAGAGACCGCTTACGTAGCCTGGTCAACCTCAATGGGACCTCTGCGACATTGAGTGAACTGCGATTCCAGCATCTACACACGGGCTTTTAAAATCTGAGGCTGCTGGCCCATTCTCTTACGAGAGTGCTGGCCGCCTAGTTCGGCAAAATCGTGGTGCCATTGCCGCAAAAGCCTGAGCAGAAATACGTGGCTGCGCTTGCTCATGTCAGTACCCATTCACACCCTCAAGCTCGCTTTCTTGCTGTCCAATTTCTATTAAAGGTTCCTTTGTTCCCTAAGTCCAACTACTAAACTGGGGGATATTATGAAGGGCCTTGAGCATCTGGATTCTGCCTAATAAAAAACATTTATTTTCATTGCA"
    return Sequence(header, sequence)

@pytest.fixture
def orf():
    sequence = "ACATTT"
    start = 0
    length = 6
    translation = 0
    return ORF(sequence, start, length, translation)

def test_sequence_length(sequence):
    assert sequence.get_sequence_length() == 1254
    
def test_sequence_longestORF(sequence):
    assert sequence.get_longest_orf().sequence == "ATGGTGCATCTGACTCCTGAGGAGAAGTCTGCCGTTACTGCCCTGTGGGGCAAGGTGAACGTGGATGAAGTTGGTGGTGAGGCCCTGGGCAGGCTGCTGGTGGTCTACCCTTGGACCCAGAGGTTCTTTGAGTCCTTTGGGGATCTGTCCACTCCTGATGCTGTTATGGGCAACCCTAAGGTGAAGGCTCATGGCAAGAAAGTGCTCGGTGCCTTTAGTGATGGCCTGGCTCACCTGGACAACCTCAAGGGCACCTTTGCCACACTGAGTGAGCTGCACTGTGACAAGCTGCACGTGGATCCTGAGAACTTCAGGCTCCTGGGCAACGTGCTGGTCTGTGTGCTGGCCCATCACTTTGGCAAAGAATTCACCCCACCAGTGCAGGCTGCCTATCAGAAAGTGGTGGCTGGTGTGGCTAATGCCCTGGCCCACAAGTATCACTAA"
    
def test_sequence_getSubsequence(sequence):
    assert sequence.get_subsequence_as_ORF(0, 6, 0).sequence == "ACATTT"
    
def test_sequence_getSubsequenceAntiSense(sequence):
    assert sequence.get_subsequence_as_ORF(0, 6, 3).sequence == "TGCAAT"
    
def test_orf_aminoAcidConversion(orf):
    assert orf.get_amino_acid() == "TF"
    
def test_orf_SNP(orf):
    sequence = "ACCTTT"
    start = 0
    length = 6
    translation = 0
    variance = ORF(sequence, start, length, translation)
    snps = orf.find_snps(variance)
    assert len(snps) == 1